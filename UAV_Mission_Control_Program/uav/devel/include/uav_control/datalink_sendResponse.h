// Generated by gencpp from file uav_control/datalink_sendResponse.msg
// DO NOT EDIT!


#ifndef UAV_CONTROL_MESSAGE_DATALINK_SENDRESPONSE_H
#define UAV_CONTROL_MESSAGE_DATALINK_SENDRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace uav_control
{
template <class ContainerAllocator>
struct datalink_sendResponse_
{
  typedef datalink_sendResponse_<ContainerAllocator> Type;

  datalink_sendResponse_()
    : err(0)  {
    }
  datalink_sendResponse_(const ContainerAllocator& _alloc)
    : err(0)  {
    }



   typedef uint8_t _err_type;
  _err_type err;




  typedef boost::shared_ptr< ::uav_control::datalink_sendResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::uav_control::datalink_sendResponse_<ContainerAllocator> const> ConstPtr;

}; // struct datalink_sendResponse_

typedef ::uav_control::datalink_sendResponse_<std::allocator<void> > datalink_sendResponse;

typedef boost::shared_ptr< ::uav_control::datalink_sendResponse > datalink_sendResponsePtr;
typedef boost::shared_ptr< ::uav_control::datalink_sendResponse const> datalink_sendResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::uav_control::datalink_sendResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::uav_control::datalink_sendResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace uav_control

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/jade/share/std_msgs/cmake/../msg'], 'uav_control': ['/home/yifan/Desktop/FYP Material/FYP Program/Raspberry_Pi_Program/uav/src/uav_control/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::uav_control::datalink_sendResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::uav_control::datalink_sendResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_control::datalink_sendResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::uav_control::datalink_sendResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_control::datalink_sendResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::uav_control::datalink_sendResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::uav_control::datalink_sendResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "acffb5c6cc04f329c65fc347ad35fb2b";
  }

  static const char* value(const ::uav_control::datalink_sendResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xacffb5c6cc04f329ULL;
  static const uint64_t static_value2 = 0xc65fc347ad35fb2bULL;
};

template<class ContainerAllocator>
struct DataType< ::uav_control::datalink_sendResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uav_control/datalink_sendResponse";
  }

  static const char* value(const ::uav_control::datalink_sendResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::uav_control::datalink_sendResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint8 err\n\
\n\
";
  }

  static const char* value(const ::uav_control::datalink_sendResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::uav_control::datalink_sendResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.err);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER;
  }; // struct datalink_sendResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::uav_control::datalink_sendResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::uav_control::datalink_sendResponse_<ContainerAllocator>& v)
  {
    s << indent << "err: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.err);
  }
};

} // namespace message_operations
} // namespace ros

#endif // UAV_CONTROL_MESSAGE_DATALINK_SENDRESPONSE_H
