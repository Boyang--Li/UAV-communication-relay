"""autogenerated by genpy from uav_control/datalink_sendRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class datalink_sendRequest(genpy.Message):
  _md5sum = "524c13f598d34c67d6137da00cc1efe6"
  _type = "uav_control/datalink_sendRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """

uint8 source_id
uint8 target_id
uint8 route
uint16 len
uint8[1024] payload

"""
  __slots__ = ['source_id','target_id','route','len','payload']
  _slot_types = ['uint8','uint8','uint8','uint16','uint8[1024]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       source_id,target_id,route,len,payload

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(datalink_sendRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.source_id is None:
        self.source_id = 0
      if self.target_id is None:
        self.target_id = 0
      if self.route is None:
        self.route = 0
      if self.len is None:
        self.len = 0
      if self.payload is None:
        self.payload = chr(0)*1024
    else:
      self.source_id = 0
      self.target_id = 0
      self.route = 0
      self.len = 0
      self.payload = chr(0)*1024

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3BH.pack(_x.source_id, _x.target_id, _x.route, _x.len))
      _x = self.payload
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_1024B.pack(*_x))
      else:
        buff.write(_struct_1024s.pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.source_id, _x.target_id, _x.route, _x.len,) = _struct_3BH.unpack(str[start:end])
      start = end
      end += 1024
      self.payload = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3BH.pack(_x.source_id, _x.target_id, _x.route, _x.len))
      _x = self.payload
      # - if encoded as a list instead, serialize as bytes instead of string
      if type(_x) in [list, tuple]:
        buff.write(_struct_1024B.pack(*_x))
      else:
        buff.write(_struct_1024s.pack(_x))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 5
      (_x.source_id, _x.target_id, _x.route, _x.len,) = _struct_3BH.unpack(str[start:end])
      start = end
      end += 1024
      self.payload = str[start:end]
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_1024B = struct.Struct("<1024B")
_struct_1024s = struct.Struct("<1024s")
_struct_3BH = struct.Struct("<3BH")
"""autogenerated by genpy from uav_control/datalink_sendResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class datalink_sendResponse(genpy.Message):
  _md5sum = "acffb5c6cc04f329c65fc347ad35fb2b"
  _type = "uav_control/datalink_sendResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """uint8 err


"""
  __slots__ = ['err']
  _slot_types = ['uint8']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       err

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(datalink_sendResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.err is None:
        self.err = 0
    else:
      self.err = 0

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      buff.write(_struct_B.pack(self.err))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 1
      (self.err,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      buff.write(_struct_B.pack(self.err))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 1
      (self.err,) = _struct_B.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_B = struct.Struct("<B")
class datalink_send(object):
  _type          = 'uav_control/datalink_send'
  _md5sum = 'c59b12dd2dff876a39a7e4b90f940b75'
  _request_class  = datalink_sendRequest
  _response_class = datalink_sendResponse
